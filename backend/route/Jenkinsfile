pipeline {
    agent any

    environment {
        SERVER_ID = 'ubuntu'
        SERVER_DOMAIN = 'seungki-cho.lol' // 변경된 서버 도메인
        SERVER_PORT = '2222' // SSH 포트 설정
        DOCKER_HUB_REPO = 'seungkicho/gilin'
        DOCKER_CREDENTIALS_ID = 'dockerhub_csk'
        GITLAB_CREDENTIALS_ID = 'gitlab-csk'
        ENV_CREDENTIALS_ID = 'env_file'
        IMAGE_TAG = "${DOCKER_HUB_REPO}:${BUILD_NUMBER}"  // 빌드 번호를 사용한 이미지 태그
    }

    stages {
        stage('Clone') {
            steps {
                script {
                    git branch: 'be/dev-test', url: 'https://lab.ssafy.com/s11-final/S11P31A306', credentialsId: GITLAB_CREDENTIALS_ID
                }
            }
        }

        stage('Build') {
            steps {
                withCredentials([file(credentialsId: ENV_CREDENTIALS_ID, variable: 'ENV_FILE')]) {
                    dir('backend/route') {
                        // .env 파일을 로드하여 환경 변수로 설정한 후 빌드 실행
                        sh '''
                            export $(cat $ENV_FILE | xargs)
                            chmod +x ./gradlew
                            ./gradlew clean build -i
                        '''
                    }
                }
            }
        }

        stage('Verify Build Artifacts') {
            steps {
                script {
                    dir('backend/route') {
                        sh 'ls -la build/libs'
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    dir('backend/route') {
                        sh """
                        docker build -t ${IMAGE_TAG} .
                        """
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: DOCKER_CREDENTIALS_ID, passwordVariable: 'DOCKERHUB_PASSWORD', usernameVariable: 'DOCKERHUB_USERNAME')]) {
                        sh """
                        echo "$DOCKERHUB_PASSWORD" | docker login -u $DOCKERHUB_USERNAME --password-stdin
                        docker push ${IMAGE_TAG}
                        docker tag ${IMAGE_TAG} ${DOCKER_HUB_REPO}:latest
                        docker push ${DOCKER_HUB_REPO}:latest
                        docker logout
                        """
                    }
                }
            }
        }

        stage('EC2 Pull') {
            steps {
                sshagent (credentials: ['ec2_ssh_test']) { // SSH credentials 변경
                   withCredentials([usernamePassword(credentialsId: DOCKER_CREDENTIALS_ID, usernameVariable: 'DOCKERHUB_USERNAME', passwordVariable: 'DOCKERHUB_PASSWORD'), file(credentialsId: ENV_CREDENTIALS_ID, variable: 'ENV_FILE')]) {
                       sh """
                           # .env 파일을 임시 디렉토리에 복사한 후 이동
                           scp -P $SERVER_PORT -o StrictHostKeyChecking=no $ENV_FILE $SERVER_ID@$SERVER_DOMAIN:/tmp/.env
                           ssh -p $SERVER_PORT -o StrictHostKeyChecking=no $SERVER_ID@$SERVER_DOMAIN <<EOF
                           sudo mv /tmp/.env /home/ubuntu/.env
                           sudo chown ubuntu:ubuntu /home/ubuntu/.env
                           echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USERNAME --password-stdin
                           docker pull ${IMAGE_TAG}
                           docker pull ${DOCKER_HUB_REPO}:latest
                           docker logout
EOF
                       """
                   }
                }
            }
        }

        stage('Deploy') {
            steps {
                sshagent(credentials: ['ec2_ssh_test']) { // SSH credentials 변경
                    sh """
                        ssh -p $SERVER_PORT -o StrictHostKeyChecking=no $SERVER_ID@$SERVER_DOMAIN <<EOF
                        docker stop route-backend || true
                        docker rm route-backend || true
                        docker run -d --name route-backend -p 8081:8080 --env-file /home/ubuntu/.env ${DOCKER_HUB_REPO}:latest
EOF
                    """
                }
            }
        }
    }
   post {
       success {
           script {
               mattermostSend (
                   color: 'good',
                   message: "빌드 성공 :jongho_gun::seoyounggun::seungki_excited_gun: : ${env.JOB_NAME} #${env.BUILD_NUMBER} (<${env.BUILD_URL}|Details>)",
                   endpoint: 'https://meeting.ssafy.com/hooks/k7cnt4fjotgrum85a6uhe6c8yo',
                   channel: 'jenkins306'
               )
           }
       }
       failure {
           script {
               mattermostSend (
                   color: 'danger',
                   message: "빌드 실패 :seoyoung2::jongho_cakeburn::seung_gi_pet: : ${env.JOB_NAME} #${env.BUILD_NUMBER} (<${env.BUILD_URL}|Details>)",
                   endpoint: 'https://meeting.ssafy.com/hooks/k7cnt4fjotgrum85a6uhe6c8yo',
                   channel: 'jenkins306'
               )
           }
       }
   }
}
